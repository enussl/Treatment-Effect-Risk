cvar.y = data %>%
select(X2) %>%
arrange(X2) %>%
mutate(worst_5 = as.numeric(quantile(X2, 0.05))) %>%
filter(X2 <= worst_5) %>%
select(X2) %>%
mutate(cvar.2 = mean(X2)) %>%
slice(1)
cvar.xy = data.sum %>%
rename("var" = "rnorm.n...1e.06..mean...0..sd...sqrt.2...2...0.7..") %>%
mutate(worst_5 = as.numeric(quantile(var, 0.05))) %>%
filter(var <= worst_5) %>%
select(var) %>%
mutate(cvar.comb = mean(var)) %>%
slice(1)
?mvnorm
?mvrnorm
cor(data[,1], data[,2])
data.sum = data.frame(rnorm(n = 1000000, mean = 0, sd = 2+2*0.7))
cvar.x = data %>%
select(X1) %>%
arrange(X1) %>%
mutate(worst_5 = as.numeric(quantile(X1, 0.05))) %>%
filter(X1 <= worst_5) %>%
select(X1) %>%
mutate(cvar.1 = mean(X1)) %>%
slice(1)
cvar.y = data %>%
select(X2) %>%
arrange(X2) %>%
mutate(worst_5 = as.numeric(quantile(X2, 0.05))) %>%
filter(X2 <= worst_5) %>%
select(X2) %>%
mutate(cvar.2 = mean(X2)) %>%
slice(1)
cvar.xy = data.sum %>%
rename("var" = "rnorm.n...1e.06..mean...0..sd...sqrt.2...2...0.7..") %>%
mutate(worst_5 = as.numeric(quantile(var, 0.05))) %>%
filter(var <= worst_5) %>%
select(var) %>%
mutate(cvar.comb = mean(var)) %>%
slice(1)
cor(data[,1], data[,2])
cvar.xy$cvar.comb-cvar.x$cvar.1-cvar.y$cvar.2
library(MASS)
library(PerformanceAnalytics)
library(dplyr)
sigma = matrix(c(1, 0.7, 0.7, 1), ncol = 2, nrow = 2)
data = data.frame(mvrnorm(n = 10000000, mu = c(0,0), Sigma = sigma))
data.sum = data.frame(rnorm(n = 10000000, mean = 0, sd = 2+2*0.7))
cvar.x = data %>%
select(X1) %>%
arrange(X1) %>%
mutate(worst_5 = as.numeric(quantile(X1, 0.05))) %>%
filter(X1 <= worst_5) %>%
select(X1) %>%
mutate(cvar.1 = mean(X1)) %>%
slice(1)
cvar.y = data %>%
select(X2) %>%
arrange(X2) %>%
mutate(worst_5 = as.numeric(quantile(X2, 0.05))) %>%
filter(X2 <= worst_5) %>%
select(X2) %>%
mutate(cvar.2 = mean(X2)) %>%
slice(1)
cvar.xy = data.sum %>%
rename("var" = "rnorm.n...1e.06..mean...0..sd...sqrt.2...2...0.7..") %>%
mutate(worst_5 = as.numeric(quantile(var, 0.05))) %>%
filter(var <= worst_5) %>%
select(var) %>%
mutate(cvar.comb = mean(var)) %>%
slice(1)
View(data.sum)
cvar.xy = data.sum %>%
rename("var" = "rnorm.n...1e.06..mean...0..sd...sqrt.2...2...0.7.") %>%
mutate(worst_5 = as.numeric(quantile(var, 0.05))) %>%
filter(var <= worst_5) %>%
select(var) %>%
mutate(cvar.comb = mean(var)) %>%
slice(1)
colnames(data.sum)
cvar.xy = data.sum %>%
rename("var" = "rnorm.n...1e.07..mean...0..sd...2...2...0.7.") %>%
mutate(worst_5 = as.numeric(quantile(var, 0.05))) %>%
filter(var <= worst_5) %>%
select(var) %>%
mutate(cvar.comb = mean(var)) %>%
slice(1)
cor(data[,1], data[,2])
cvar.xy$cvar.comb-cvar.x$cvar.1-cvar.y$cvar.2
cvar.xy$cvar.comb-cvar.x$cvar.1-cvar.y$cvar.2
install.packages("bayesmeta")
library(bayesmeta)
?convolve
simulate.corr.dynamic = function(shift, sigma.1, sigma.0,
n.obs, mu.1, mu.0){
set.seed(42)
n.sample = n.obs
corr = seq(-1, 1, l = 20)
results.corr = list()
v = 1
for (c in corr){
y.1 = rnorm(n = n.sample, mean = mu.1, sd = sigma.1)
y.0 = rnorm(n = n.sample, mean = mu.0, sd = sigma.0)
delta.conv = convolve(dens1 = y.1, dens2 = -1*y.0)
delta = rnorm(n = n.sample, mean = mu.1-mu.0,
sd = sqrt(sigma.1^2+sigma.0^2-2*c*sigma.1*sigma.0))
alpha = seq(0, 1, 0.05)
results = matrix(data = NA, nrow = length(alpha), ncol = 5)
i = 1
for(j in alpha){
results[i,1] = max(ES(y.1, p_loss = j)-ES(y.0, p_loss = j),
ES(-1*y.0, p_loss = j)-ES(-1*y.1, p_loss = j))
results[i,2] = ES(delta, p_loss = j)
results[i,3] = ES(y.1, p_loss = j) + ES(-1*y.0, p_loss = j)
results[i,4] = ES(delta.conv, p_loss = j)
results[i,5] = j
i = i + 1
}
results.corr[[v]] = data.frame(results) %>%
mutate(corr = c)
v = v + 1
}
results = do.call(rbind, results.corr) %>%
rename("LB" = "X1", "True" = "X2", "UB" = "X3", "Ind" = "X5" ,"alpha" = "X5") %>%
pivot_longer(cols = c("LB", "True", "UB", "Ind")) %>%
mutate(corr = round(corr, 2))
return(results)
}
# First look at our bounds vs the truth depending on the correlation
data.corr = simulate.corr.dynamic(shift = 2, sigma.1 = 2, sigma.0 = 2, n.obs = 100000, mu.1 = 1, mu.0 = 1)
simulate.corr.dynamic = function(shift, sigma.1, sigma.0,
n.obs, mu.1, mu.0){
set.seed(42)
n.sample = n.obs
corr = seq(-1, 1, l = 20)
results.corr = list()
v = 1
for (c in corr){
y.1 = rnorm(n = n.sample, mean = mu.1, sd = sigma.1)
y.0 = rnorm(n = n.sample, mean = mu.0, sd = sigma.0)
delta.conv = convolve(dens1 = y.1, dens2 = y.0)
delta = rnorm(n = n.sample, mean = mu.1-mu.0,
sd = sqrt(sigma.1^2+sigma.0^2-2*c*sigma.1*sigma.0))
alpha = seq(0, 1, 0.05)
results = matrix(data = NA, nrow = length(alpha), ncol = 5)
i = 1
for(j in alpha){
results[i,1] = max(ES(y.1, p_loss = j)-ES(y.0, p_loss = j),
ES(-1*y.0, p_loss = j)-ES(-1*y.1, p_loss = j))
results[i,2] = ES(delta, p_loss = j)
results[i,3] = ES(y.1, p_loss = j) + ES(-1*y.0, p_loss = j)
results[i,4] = ES(delta.conv, p_loss = j)
results[i,5] = j
i = i + 1
}
results.corr[[v]] = data.frame(results) %>%
mutate(corr = c)
v = v + 1
}
results = do.call(rbind, results.corr) %>%
rename("LB" = "X1", "True" = "X2", "UB" = "X3", "Ind" = "X5" ,"alpha" = "X5") %>%
pivot_longer(cols = c("LB", "True", "UB", "Ind")) %>%
mutate(corr = round(corr, 2))
return(results)
}
# First look at our bounds vs the truth depending on the correlation
data.corr = simulate.corr.dynamic(shift = 2, sigma.1 = 2, sigma.0 = 2, n.obs = 100000, mu.1 = 1, mu.0 = 1)
?convolve
?dnorm
?convolve
simulate.corr.dynamic = function(shift, sigma.1, sigma.0,
n.obs, mu.1, mu.0){
set.seed(42)
n.sample = n.obs
corr = seq(-1, 1, l = 20)
results.corr = list()
v = 1
for (c in corr){
y.1 = rnorm(n = n.sample, mean = mu.1, sd = sigma.1)
y.0 = rnorm(n = n.sample, mean = mu.0, sd = sigma.0)
delta.conv = fft::convolve(dens1 = y.1, dens2 = -1*y.0)
delta = rnorm(n = n.sample, mean = mu.1-mu.0,
sd = sqrt(sigma.1^2+sigma.0^2-2*c*sigma.1*sigma.0))
alpha = seq(0, 1, 0.05)
results = matrix(data = NA, nrow = length(alpha), ncol = 5)
i = 1
for(j in alpha){
results[i,1] = max(ES(y.1, p_loss = j)-ES(y.0, p_loss = j),
ES(-1*y.0, p_loss = j)-ES(-1*y.1, p_loss = j))
results[i,2] = ES(delta, p_loss = j)
results[i,3] = ES(y.1, p_loss = j) + ES(-1*y.0, p_loss = j)
results[i,4] = ES(delta.conv, p_loss = j)
results[i,5] = j
i = i + 1
}
results.corr[[v]] = data.frame(results) %>%
mutate(corr = c)
v = v + 1
}
results = do.call(rbind, results.corr) %>%
rename("LB" = "X1", "True" = "X2", "UB" = "X3", "Ind" = "X5" ,"alpha" = "X5") %>%
pivot_longer(cols = c("LB", "True", "UB", "Ind")) %>%
mutate(corr = round(corr, 2))
return(results)
}
# First look at our bounds vs the truth depending on the correlation
data.corr = simulate.corr.dynamic(shift = 2, sigma.1 = 2, sigma.0 = 2, n.obs = 100000, mu.1 = 1, mu.0 = 1)
library(fft)
library(stats)
simulate.corr.dynamic = function(shift, sigma.1, sigma.0,
n.obs, mu.1, mu.0){
set.seed(42)
n.sample = n.obs
corr = seq(-1, 1, l = 20)
results.corr = list()
v = 1
for (c in corr){
y.1 = rnorm(n = n.sample, mean = mu.1, sd = sigma.1)
y.0 = rnorm(n = n.sample, mean = mu.0, sd = sigma.0)
delta.conv = convolve(dens1 = y.1, dens2 = -1*y.0)
delta = rnorm(n = n.sample, mean = mu.1-mu.0,
sd = sqrt(sigma.1^2+sigma.0^2-2*c*sigma.1*sigma.0))
alpha = seq(0, 1, 0.05)
results = matrix(data = NA, nrow = length(alpha), ncol = 5)
i = 1
for(j in alpha){
results[i,1] = max(ES(y.1, p_loss = j)-ES(y.0, p_loss = j),
ES(-1*y.0, p_loss = j)-ES(-1*y.1, p_loss = j))
results[i,2] = ES(delta, p_loss = j)
results[i,3] = ES(y.1, p_loss = j) + ES(-1*y.0, p_loss = j)
results[i,4] = ES(delta.conv, p_loss = j)
results[i,5] = j
i = i + 1
}
results.corr[[v]] = data.frame(results) %>%
mutate(corr = c)
v = v + 1
}
results = do.call(rbind, results.corr) %>%
rename("LB" = "X1", "True" = "X2", "UB" = "X3", "Ind" = "X5" ,"alpha" = "X5") %>%
pivot_longer(cols = c("LB", "True", "UB", "Ind")) %>%
mutate(corr = round(corr, 2))
return(results)
}
# First look at our bounds vs the truth depending on the correlation
data.corr = simulate.corr.dynamic(shift = 2, sigma.1 = 2, sigma.0 = 2, n.obs = 100000, mu.1 = 1, mu.0 = 1)
simulate.corr.dynamic = function(shift, sigma.1, sigma.0,
n.obs, mu.1, mu.0){
set.seed(42)
n.sample = n.obs
corr = seq(-1, 1, l = 20)
results.corr = list()
v = 1
for (c in corr){
y.1 = rnorm(n = n.sample, mean = mu.1, sd = sigma.1)
y.0 = rnorm(n = n.sample, mean = mu.0, sd = sigma.0)
delta.conv = stats::convolve(dens1 = y.1, dens2 = -1*y.0)
delta = rnorm(n = n.sample, mean = mu.1-mu.0,
sd = sqrt(sigma.1^2+sigma.0^2-2*c*sigma.1*sigma.0))
alpha = seq(0, 1, 0.05)
results = matrix(data = NA, nrow = length(alpha), ncol = 5)
i = 1
for(j in alpha){
results[i,1] = max(ES(y.1, p_loss = j)-ES(y.0, p_loss = j),
ES(-1*y.0, p_loss = j)-ES(-1*y.1, p_loss = j))
results[i,2] = ES(delta, p_loss = j)
results[i,3] = ES(y.1, p_loss = j) + ES(-1*y.0, p_loss = j)
results[i,4] = ES(delta.conv, p_loss = j)
results[i,5] = j
i = i + 1
}
results.corr[[v]] = data.frame(results) %>%
mutate(corr = c)
v = v + 1
}
results = do.call(rbind, results.corr) %>%
rename("LB" = "X1", "True" = "X2", "UB" = "X3", "Ind" = "X5" ,"alpha" = "X5") %>%
pivot_longer(cols = c("LB", "True", "UB", "Ind")) %>%
mutate(corr = round(corr, 2))
return(results)
}
# First look at our bounds vs the truth depending on the correlation
data.corr = simulate.corr.dynamic(shift = 2, sigma.1 = 2, sigma.0 = 2, n.obs = 100000, mu.1 = 1, mu.0 = 1)
simulate.corr.dynamic = function(shift, sigma.1, sigma.0,
n.obs, mu.1, mu.0){
set.seed(42)
n.sample = n.obs
corr = seq(-1, 1, l = 20)
results.corr = list()
v = 1
for (c in corr){
y.1 = rnorm(n = n.sample, mean = mu.1, sd = sigma.1)
y.0 = rnorm(n = n.sample, mean = mu.0, sd = sigma.0)
delta.conv = stats::convolve(x = y.1, y = -1*y.0)
delta = rnorm(n = n.sample, mean = mu.1-mu.0,
sd = sqrt(sigma.1^2+sigma.0^2-2*c*sigma.1*sigma.0))
alpha = seq(0, 1, 0.05)
results = matrix(data = NA, nrow = length(alpha), ncol = 5)
i = 1
for(j in alpha){
results[i,1] = max(ES(y.1, p_loss = j)-ES(y.0, p_loss = j),
ES(-1*y.0, p_loss = j)-ES(-1*y.1, p_loss = j))
results[i,2] = ES(delta, p_loss = j)
results[i,3] = ES(y.1, p_loss = j) + ES(-1*y.0, p_loss = j)
results[i,4] = ES(delta.conv, p_loss = j)
results[i,5] = j
i = i + 1
}
results.corr[[v]] = data.frame(results) %>%
mutate(corr = c)
v = v + 1
}
results = do.call(rbind, results.corr) %>%
rename("LB" = "X1", "True" = "X2", "UB" = "X3", "Ind" = "X5" ,"alpha" = "X5") %>%
pivot_longer(cols = c("LB", "True", "UB", "Ind")) %>%
mutate(corr = round(corr, 2))
return(results)
}
# First look at our bounds vs the truth depending on the correlation
data.corr = simulate.corr.dynamic(shift = 2, sigma.1 = 2, sigma.0 = 2, n.obs = 100000, mu.1 = 1, mu.0 = 1)
setwd("C:/Users/eminu/OneDrive/Desktop/Treatment-Effect-Risk")
source("./Simulation/helperfunctions.R")
# First look at our bounds vs the truth depending on the correlation
data.corr = simulate.corr.dynamic(shift = 2, sigma.1 = 2, sigma.0 = 2, n.obs = 100000, mu.1 = 1, mu.0 = 1)
simulate.corr.dynamic = function(shift, sigma.1, sigma.0,
n.obs, mu.1, mu.0){
set.seed(42)
n.sample = n.obs
corr = seq(-1, 1, l = 20)
results.corr = list()
v = 1
for (c in corr){
y.1 = rnorm(n = n.sample, mean = mu.1, sd = sigma.1)
y.0 = rnorm(n = n.sample, mean = mu.0, sd = sigma.0)
delta.conv = stats::convolve(x = y.1, y = -1*y.0)
delta = rnorm(n = n.sample, mean = mu.1-mu.0,
sd = sqrt(sigma.1^2+sigma.0^2-2*c*sigma.1*sigma.0))
alpha = seq(0, 1, 0.05)
results = matrix(data = NA, nrow = length(alpha), ncol = 5)
i = 1
for(j in alpha){
results[i,1] = max(ES(y.1, p_loss = j)-ES(y.0, p_loss = j),
ES(-1*y.0, p_loss = j)-ES(-1*y.1, p_loss = j))
results[i,2] = ES(delta, p_loss = j)
results[i,3] = ES(y.1, p_loss = j) + ES(-1*y.0, p_loss = j)
results[i,4] = ES(delta.conv, p_loss = j)
results[i,5] = j
i = i + 1
}
results.corr[[v]] = data.frame(results) %>%
mutate(corr = c)
v = v + 1
}
results = do.call(rbind, results.corr) %>%
rename("LB" = "X1", "True" = "X2", "UB" = "X3", "Ind" = "X5" ,"alpha" = "X5") %>%
pivot_longer(cols = c("LB", "True", "UB", "Ind")) %>%
mutate(corr = round(corr, 2))
return(results)
}
# First look at our bounds vs the truth depending on the correlation
data.corr = simulate.corr.dynamic(shift = 2, sigma.1 = 2, sigma.0 = 2, n.obs = 100000, mu.1 = 1, mu.0 = 1)
simulate.corr.dynamic = function(shift, sigma.1, sigma.0,
n.obs, mu.1, mu.0){
set.seed(42)
n.sample = n.obs
corr = seq(-1, 1, l = 20)
results.corr = list()
v = 1
for (c in corr){
y.1 = rnorm(n = n.sample, mean = mu.1, sd = sigma.1)
y.0 = rnorm(n = n.sample, mean = mu.0, sd = sigma.0)
delta.conv = stats::convolve(x = y.1, y = -1*y.0)
delta = rnorm(n = n.sample, mean = mu.1-mu.0,
sd = sqrt(sigma.1^2+sigma.0^2-2*c*sigma.1*sigma.0))
alpha = seq(0, 1, 0.05)
results = matrix(data = NA, nrow = length(alpha), ncol = 5)
i = 1
for(j in alpha){
results[i,1] = max(ES(y.1, p_loss = j)-ES(y.0, p_loss = j),
ES(-1*y.0, p_loss = j)-ES(-1*y.1, p_loss = j))
results[i,2] = ES(delta, p_loss = j)
results[i,3] = ES(y.1, p_loss = j) + ES(-1*y.0, p_loss = j)
results[i,4] = ES(delta.conv, p_loss = j)
results[i,5] = j
i = i + 1
}
results.corr[[v]] = data.frame(results) %>%
mutate(corr = c)
v = v + 1
}
results = do.call(rbind, results.corr) %>%
rename("LB" = "X1", "True" = "X2", "UB" = "X3", "Ind" = "X4" ,"alpha" = "X5") %>%
pivot_longer(cols = c("LB", "True", "UB", "Ind")) %>%
mutate(corr = round(corr, 2))
return(results)
}
# First look at our bounds vs the truth depending on the correlation
data.corr = simulate.corr.dynamic(shift = 2, sigma.1 = 2, sigma.0 = 2, n.obs = 100000, mu.1 = 1, mu.0 = 1)
(plot.corr = plot.results.corr.dynamic(data.corr))
plot.results.corr.dynamic = function(df){
# df: data set of results from dynamic
plot = ggplot(data = df, aes(x = alpha, y = value, group = name,
color = name)) +
geom_line(alpha = 0.6, position = position_jitter(width = 0.01, height = 0.01, seed = 1)) +
geom_point(position = position_jitter(width = 0.01, height = 0.01, seed = 1)) +
theme_bw() +
scale_color_manual(values = pal_jama("default")(4)[c(1,2,3,4)]) +
theme(legend.position = "top") +
labs(color = "", group = "", x = expression(alpha),
y = expression(widehat(CVaR[alpha](delta)))) +
facet_wrap(~corr)
return(plot)
}
(plot.corr = plot.results.corr.dynamic(data.corr))
?convolve
simulate.corr.dynamic = function(shift, sigma.1, sigma.0,
n.obs, mu.1, mu.0){
set.seed(42)
n.sample = n.obs
corr = seq(-1, 1, l = 20)
results.corr = list()
v = 1
for (c in corr){
y.1 = rnorm(n = n.sample, mean = mu.1, sd = sigma.1)
y.0 = rnorm(n = n.sample, mean = mu.0, sd = sigma.0)
delta.conv = stats::convolve(x = y.1, y = -1*y.0)
delta = rnorm(n = n.sample, mean = mu.1-mu.0,
sd = sqrt(sigma.1^2+sigma.0^2-2*c*sigma.1*sigma.0))
alpha = seq(0, 1, 0.05)
results = matrix(data = NA, nrow = length(alpha), ncol = 5)
i = 1
for(j in alpha){
results[i,1] = max(ES(y.1, p_loss = j)-ES(y.0, p_loss = j),
ES(-1*y.0, p_loss = j)-ES(-1*y.1, p_loss = j))
results[i,2] = ES(delta, p_loss = j)
results[i,3] = ES(y.1, p_loss = j) + ES(-1*y.0, p_loss = j)
results[i,4] = ES(delta.conv, p_loss = j)
results[i,5] = j
i = i + 1
}
results.corr[[v]] = data.frame(results) %>%
mutate(corr = c)
v = v + 1
}
results = do.call(rbind, results.corr) %>%
rename("LB" = "X1", "True" = "X2", "UB" = "X3", "Ind" = "X4" ,"alpha" = "X5") %>%
pivot_longer(cols = c("LB", "True", "UB", "Ind")) %>%
mutate(corr = round(corr, 2))
return(results)
}
# First look at our bounds vs the truth depending on the correlation
data.corr = simulate.corr.dynamic(shift = 2, sigma.1 = 2, sigma.0 = 2, n.obs = 100000, mu.1 = 1, mu.0 = 1)
View(data.corr)
simulate.corr.dynamic = function(shift, sigma.1, sigma.0,
n.obs, mu.1, mu.0){
set.seed(42)
n.sample = n.obs
corr = seq(-1, 1, l = 20)
results.corr = list()
v = 1
for (c in corr){
y.1 = rnorm(n = n.sample, mean = mu.1, sd = sigma.1)
y.0 = rnorm(n = n.sample, mean = mu.0, sd = sigma.0)
delta.conv = stats::convolve(x = y.1, y = rev(y.0))
delta = rnorm(n = n.sample, mean = mu.1-mu.0,
sd = sqrt(sigma.1^2+sigma.0^2-2*c*sigma.1*sigma.0))
alpha = seq(0, 1, 0.05)
results = matrix(data = NA, nrow = length(alpha), ncol = 5)
i = 1
for(j in alpha){
results[i,1] = max(ES(y.1, p_loss = j)-ES(y.0, p_loss = j),
ES(-1*y.0, p_loss = j)-ES(-1*y.1, p_loss = j))
results[i,2] = ES(delta, p_loss = j)
results[i,3] = ES(y.1, p_loss = j) + ES(-1*y.0, p_loss = j)
results[i,4] = ES(delta.conv, p_loss = j)
results[i,5] = j
i = i + 1
}
results.corr[[v]] = data.frame(results) %>%
mutate(corr = c)
v = v + 1
}
results = do.call(rbind, results.corr) %>%
rename("LB" = "X1", "True" = "X2", "UB" = "X3", "Ind" = "X4" ,"alpha" = "X5") %>%
pivot_longer(cols = c("LB", "True", "UB", "Ind")) %>%
mutate(corr = round(corr, 2))
return(results)
}
# First look at our bounds vs the truth depending on the correlation
data.corr = simulate.corr.dynamic(shift = 2, sigma.1 = 2, sigma.0 = 2, n.obs = 100000, mu.1 = 1, mu.0 = 1)
View(data.corr)
(plot.corr = plot.results.corr.dynamic(data.corr))
View(data.corr)
# Create two vectors representing two discrete distributions
x <- c(0.2, 0.5, 0.3)
y <- c(0.1, 0.6, 0.3)
# Convolve the two vectors
result <- convolve(x, y, type = "open")
# Create two vectors representing two discrete distributions
x <- c(0.2, 0.5, 0.3)
y <- c(0.1, 0.6, 0.3)
# Convolve the two vectors
result <- convolve(x, y)
# Create two vectors representing two discrete distributions
x <- c(0.2, 0.5, 0.3)
y <- c(0.1, 0.6, 0.3)
# Convolve the two vectors
result <- stats::convolve(x, y)
# Print the result
print(result)
