corr.df = data.frame(results.corr) %>%
rename("LB" = "X1",
"True" = "X2",
"UB" = "X3",
"Kallus" = "X4") %>%
mutate(corr = corr) %>%
pivot_longer(cols = c("LB", "True", "UB", "Kallus")) %>%
arrange(name, corr)
return(corr.df)
}
# Now compare our results with Kallus depending only on the correlation
data.comp.corr = simulate.corr.full(shift = 2, sigma.1 = 2, sigma.0 = 2, n.obs = 1000, mu.1 = 1, mu.0 = 1, alpha = 0.05)
(plot.comp.corr = plot.results.corr.full(data.comp.corr))
ggsave("./Plots/bounds_kallus_corr.png", plot.comp.corr, width = 15, height = 15, units = "cm")
simulate.shift.dynamic = function(shift, sigma.1, sigma.0,
n.obs, mu.1, mu.0, alpha){
# shift: upper limit of uniform r.v. (controls mean shifts)
# sigma.1: std of Y_1
# sigma.0: std of Y_0
# n.obs: number of observations
# mu.1: mean Y_1
# mu.0: mean Y_0
# alpha: alpha of CVaR
set.seed(42)
x = seq(1,1000,1)
corr = seq(-1, 1, l = 20)
shift = seq(0, shift, l = 20)
alpha = 0.05
results.corr.shift = matrix(data = NA, nrow = length(shift)*length(corr), ncol = 6)
v = 1
for (c in corr){
for(k in shift){
tau.vec = numeric()
cdte.mat = matrix(data = NA, nrow = length(x), ncol = 3)
i = 1
for (j in 1:length(x)){
shift.1 = runif(n = 1, 0, k)
shift.0 = runif(n = 1, 0, k)
y.1 = rnorm(n = n.obs, mean = mu.1+shift.1, sd = sigma.1)
y.0 = rnorm(n = n.obs, mean = mu.0+shift.0, sd = sigma.0)
delta = rnorm(n = n.obs, mean = mu.1+shift.1-(mu.0+shift.0),
sd = sqrt(sigma.1^2+sigma.0^2-2*c*sigma.1*sigma.0))
tau.vec[j] = mean(y.1)-mean(y.0)
cdte.mat[i,1] = max(ES(y.1, p_loss = alpha)-ES(y.0, p_loss = alpha),
ES(y.0, p_loss = alpha)-ES(y.1, p_loss = alpha))
cdte.mat[i,2] = ES(delta, p_loss = alpha)
cdte.mat[i,3] = ES(y.1, p_loss = alpha) + ES(-1*y.0, p_loss = alpha)
i = i + 1
}
cvar.kall = ES(tau.vec, p_loss = alpha)
cvar.us = colMeans(cdte.mat)
results.sigma.shift[v,1] = cvar.us[1]
results.sigma.shift[v,2] = cvar.us[2]
results.sigma.shift[v,3] = cvar.us[3]
results.sigma.shift[v,4] = cvar.kall
results.sigma.shift[v,5] = c
results.sigma.shift[v,6] = k
v = v + 1
}
}
sigma.shift.df = data.frame(results.sigma.shift) %>%
rename("LB" = "X1",
"True" = "X2",
"UB" = "X3",
"Kallus" = "X4",
"Corr" = "X5",
"Shift" = "X6") %>%
pivot_longer(cols = c("LB", "True", "UB", "Kallus")) %>%
arrange(name, value)
return(sigma.shift.df)
}
simulate.shift.dynamic = function(shift, sigma.1, sigma.0,
n.obs, mu.1, mu.0, alpha){
# shift: upper limit of uniform r.v. (controls mean shifts)
# sigma.1: std of Y_1
# sigma.0: std of Y_0
# n.obs: number of observations
# mu.1: mean Y_1
# mu.0: mean Y_0
# alpha: alpha of CVaR
set.seed(42)
x = seq(1,1000,1)
corr = seq(-1, 1, l = 20)
shift = seq(0, shift, l = 20)
alpha = 0.05
results.corr.shift = matrix(data = NA, nrow = length(shift)*length(corr), ncol = 6)
v = 1
for (c in corr){
for(k in shift){
tau.vec = numeric()
cdte.mat = matrix(data = NA, nrow = length(x), ncol = 3)
i = 1
for (j in 1:length(x)){
shift.1 = runif(n = 1, 0, k)
shift.0 = runif(n = 1, 0, k)
y.1 = rnorm(n = n.obs, mean = mu.1+shift.1, sd = sigma.1)
y.0 = rnorm(n = n.obs, mean = mu.0+shift.0, sd = sigma.0)
delta = rnorm(n = n.obs, mean = mu.1+shift.1-(mu.0+shift.0),
sd = sqrt(sigma.1^2+sigma.0^2-2*c*sigma.1*sigma.0))
tau.vec[j] = mean(y.1)-mean(y.0)
cdte.mat[i,1] = max(ES(y.1, p_loss = alpha)-ES(y.0, p_loss = alpha),
ES(y.0, p_loss = alpha)-ES(y.1, p_loss = alpha))
cdte.mat[i,2] = ES(delta, p_loss = alpha)
cdte.mat[i,3] = ES(y.1, p_loss = alpha) + ES(-1*y.0, p_loss = alpha)
i = i + 1
}
cvar.kall = ES(tau.vec, p_loss = alpha)
cvar.us = colMeans(cdte.mat)
results.sigma.shift[v,1] = cvar.us[1]
results.sigma.shift[v,2] = cvar.us[2]
results.sigma.shift[v,3] = cvar.us[3]
results.sigma.shift[v,4] = cvar.kall
results.sigma.shift[v,5] = c
results.sigma.shift[v,6] = k
v = v + 1
}
}
sigma.shift.df = data.frame(results.sigma.shift) %>%
rename("LB" = "X1",
"True" = "X2",
"UB" = "X3",
"Kallus" = "X4",
"Corr" = "X5",
"Shift" = "X6") %>%
pivot_longer(cols = c("LB", "True", "UB", "Kallus")) %>%
arrange(name, value)
return(sigma.shift.df)
}
simulate.shift.dynamic(shift = 3, sigma.1 = 1, sigma.0 = 1, n.obs = 1000, mu.1 = 1, mu.0 = 1, alpha = 0.05)
simulate.shift.dynamic = function(shift, sigma.1, sigma.0,
n.obs, mu.1, mu.0, alpha){
# shift: upper limit of uniform r.v. (controls mean shifts)
# sigma.1: std of Y_1
# sigma.0: std of Y_0
# n.obs: number of observations
# mu.1: mean Y_1
# mu.0: mean Y_0
# alpha: alpha of CVaR
set.seed(42)
x = seq(1,1000,1)
corr = seq(-1, 1, l = 20)
shift = seq(0, shift, l = 20)
alpha = 0.05
results.corr.shift = matrix(data = NA, nrow = length(shift)*length(corr), ncol = 6)
v = 1
for (c in corr){
for(k in shift){
tau.vec = numeric()
cdte.mat = matrix(data = NA, nrow = length(x), ncol = 3)
i = 1
for (j in 1:length(x)){
shift.1 = runif(n = 1, 0, k)
shift.0 = runif(n = 1, 0, k)
y.1 = rnorm(n = n.obs, mean = mu.1+shift.1, sd = sigma.1)
y.0 = rnorm(n = n.obs, mean = mu.0+shift.0, sd = sigma.0)
delta = rnorm(n = n.obs, mean = mu.1+shift.1-(mu.0+shift.0),
sd = sqrt(sigma.1^2+sigma.0^2-2*c*sigma.1*sigma.0))
tau.vec[j] = mean(y.1)-mean(y.0)
cdte.mat[i,1] = max(ES(y.1, p_loss = alpha)-ES(y.0, p_loss = alpha),
ES(y.0, p_loss = alpha)-ES(y.1, p_loss = alpha))
cdte.mat[i,2] = ES(delta, p_loss = alpha)
cdte.mat[i,3] = ES(y.1, p_loss = alpha) + ES(-1*y.0, p_loss = alpha)
i = i + 1
}
cvar.kall = ES(tau.vec, p_loss = alpha)
cvar.us = colMeans(cdte.mat)
results.corr.shift[v,1] = cvar.us[1]
results.corr.shift[v,2] = cvar.us[2]
results.corr.shift[v,3] = cvar.us[3]
results.corr.shift[v,4] = cvar.kall
results.corr.shift[v,5] = c
results.corr.shift[v,6] = k
v = v + 1
}
}
corr.shift.df = data.frame(results.corr.shift) %>%
rename("LB" = "X1",
"True" = "X2",
"UB" = "X3",
"Kallus" = "X4",
"Corr" = "X5",
"Shift" = "X6") %>%
pivot_longer(cols = c("LB", "True", "UB", "Kallus")) %>%
arrange(name, value)
return(corr.shift.df)
}
simulate.shift.dynamic(shift = 3, sigma.1 = 1, sigma.0 = 1, n.obs = 1000, mu.1 = 1, mu.0 = 1, alpha = 0.05)
data = simulate.shift.dynamic(shift = 3, sigma.1 = 1, sigma.0 = 1, n.obs = 1000, mu.1 = 1, mu.0 = 1, alpha = 0.05)
plot.results.shift.dynamic(data)
plot.results.shift.dynamic = function(df){
# df: data set of results from shift dynamic
plot = ggplot(data = df, aes(x = Corr, y = value, group = name,
color = name)) +
geom_line(alpha = 0.6, position = position_jitter(width = 0.01, height = 0.01, seed = 1)) +
geom_point(position = position_jitter(width = 0.01, height = 0.01, seed = 1)) +
theme_bw() +
scale_color_jama() +
theme(legend.position = "top") +
labs(color = "", group = "", x = expression(rho),
y = expression(widehat(CVaR[alpha](delta)))) +
facet_wrap(~Shift)
return(plot)
}
plot.results.shift.dynamic(data)
simulate.shift.dynamic = function(shift, sigma.1, sigma.0,
n.obs, mu.1, mu.0, alpha){
# shift: upper limit of uniform r.v. (controls mean shifts)
# sigma.1: std of Y_1
# sigma.0: std of Y_0
# n.obs: number of observations
# mu.1: mean Y_1
# mu.0: mean Y_0
# alpha: alpha of CVaR
set.seed(42)
x = seq(1,1000,1)
corr = seq(-1, 1, l = 20)
shift = seq(0, shift, l = 20)
alpha = 0.05
results.corr.shift = matrix(data = NA, nrow = length(shift)*length(corr), ncol = 6)
v = 1
for (c in corr){
for(k in shift){
tau.vec = numeric()
cdte.mat = matrix(data = NA, nrow = length(x), ncol = 3)
i = 1
for (j in 1:length(x)){
shift.1 = runif(n = 1, 0, k)
shift.0 = runif(n = 1, 0, k)
y.1 = rnorm(n = n.obs, mean = mu.1+shift.1, sd = sigma.1)
y.0 = rnorm(n = n.obs, mean = mu.0+shift.0, sd = sigma.0)
delta = rnorm(n = n.obs, mean = mu.1+shift.1-(mu.0+shift.0),
sd = sqrt(sigma.1^2+sigma.0^2-2*c*sigma.1*sigma.0))
tau.vec[j] = mean(y.1)-mean(y.0)
cdte.mat[i,1] = max(ES(y.1, p_loss = alpha)-ES(y.0, p_loss = alpha),
ES(y.0, p_loss = alpha)-ES(y.1, p_loss = alpha))
cdte.mat[i,2] = ES(delta, p_loss = alpha)
cdte.mat[i,3] = ES(y.1, p_loss = alpha) + ES(-1*y.0, p_loss = alpha)
i = i + 1
}
cvar.kall = ES(tau.vec, p_loss = alpha)
cvar.us = colMeans(cdte.mat)
results.corr.shift[v,1] = cvar.us[1]
results.corr.shift[v,2] = cvar.us[2]
results.corr.shift[v,3] = cvar.us[3]
results.corr.shift[v,4] = cvar.kall
results.corr.shift[v,5] = c
results.corr.shift[v,6] = k
v = v + 1
}
}
corr.shift.df = data.frame(results.corr.shift) %>%
rename("LB" = "X1",
"True" = "X2",
"UB" = "X3",
"Kallus" = "X4",
"Corr" = "X5",
"Shift" = "X6") %>%
mutate(Shift = round(Shift,2)) %>%
pivot_longer(cols = c("LB", "True", "UB", "Kallus")) %>%
arrange(name, value)
return(corr.shift.df)
}
simulate.shift.dynamic = function(shift, sigma.1, sigma.0,
n.obs, mu.1, mu.0, alpha){
# shift: upper limit of uniform r.v. (controls mean shifts)
# sigma.1: std of Y_1
# sigma.0: std of Y_0
# n.obs: number of observations
# mu.1: mean Y_1
# mu.0: mean Y_0
# alpha: alpha of CVaR
set.seed(42)
x = seq(1,1000,1)
corr = seq(-1, 1, l = 20)
shift = seq(0, shift, l = 20)
alpha = 0.05
results.corr.shift = matrix(data = NA, nrow = length(shift)*length(corr), ncol = 6)
v = 1
for (c in corr){
for(k in shift){
tau.vec = numeric()
cdte.mat = matrix(data = NA, nrow = length(x), ncol = 3)
i = 1
for (j in 1:length(x)){
shift.1 = runif(n = 1, 0, k)
shift.0 = runif(n = 1, 0, k)
y.1 = rnorm(n = n.obs, mean = mu.1+shift.1, sd = sigma.1)
y.0 = rnorm(n = n.obs, mean = mu.0+shift.0, sd = sigma.0)
delta = rnorm(n = n.obs, mean = mu.1+shift.1-(mu.0+shift.0),
sd = sqrt(sigma.1^2+sigma.0^2-2*c*sigma.1*sigma.0))
tau.vec[j] = mean(y.1)-mean(y.0)
cdte.mat[i,1] = min(ES(y.1, p_loss = alpha)-ES(y.0, p_loss = alpha),
ES(y.0, p_loss = alpha)-ES(y.1, p_loss = alpha))
cdte.mat[i,2] = ES(delta, p_loss = alpha)
cdte.mat[i,3] = ES(y.1, p_loss = alpha) + ES(-1*y.0, p_loss = alpha)
i = i + 1
}
cvar.kall = ES(tau.vec, p_loss = alpha)
cvar.us = colMeans(cdte.mat)
results.corr.shift[v,1] = cvar.us[1]
results.corr.shift[v,2] = cvar.us[2]
results.corr.shift[v,3] = cvar.us[3]
results.corr.shift[v,4] = cvar.kall
results.corr.shift[v,5] = c
results.corr.shift[v,6] = k
v = v + 1
}
}
corr.shift.df = data.frame(results.corr.shift) %>%
rename("LB" = "X1",
"True" = "X2",
"UB" = "X3",
"Kallus" = "X4",
"Corr" = "X5",
"Shift" = "X6") %>%
mutate(Shift = round(Shift,2)) %>%
pivot_longer(cols = c("LB", "True", "UB", "Kallus")) %>%
arrange(name, value)
return(corr.shift.df)
}
data = simulate.shift.dynamic(shift = 3, sigma.1 = 1, sigma.0 = 1, n.obs = 1000, mu.1 = 1, mu.0 = 1, alpha = 0.05)
simulate.shift.dynamic = function(shift, sigma.1, sigma.0,
n.obs, mu.1, mu.0, alpha){
# shift: upper limit of uniform r.v. (controls mean shifts)
# sigma.1: std of Y_1
# sigma.0: std of Y_0
# n.obs: number of observations
# mu.1: mean Y_1
# mu.0: mean Y_0
# alpha: alpha of CVaR
set.seed(42)
x = seq(1,1000,1)
corr = seq(-1, 1, l = 20)
shift = seq(0, shift, l = 20)
alpha = 0.05
results.corr.shift = matrix(data = NA, nrow = length(shift)*length(corr), ncol = 6)
v = 1
for (c in corr){
for(k in shift){
tau.vec = numeric()
cdte.mat = matrix(data = NA, nrow = length(x), ncol = 3)
i = 1
for (j in 1:length(x)){
shift.1 = runif(n = 1, 0, k)
shift.0 = runif(n = 1, 0, k)
y.1 = rnorm(n = n.obs, mean = mu.1+shift.1, sd = sigma.1)
y.0 = rnorm(n = n.obs, mean = mu.0+shift.0, sd = sigma.0)
delta = rnorm(n = n.obs, mean = mu.1+shift.1-(mu.0+shift.0),
sd = sqrt(sigma.1^2+sigma.0^2-2*c*sigma.1*sigma.0))
tau.vec[j] = mean(y.1)-mean(y.0)
cdte.mat[i,1] = max(ES(y.1, p_loss = alpha)-ES(y.0, p_loss = alpha),
ES(-1*y.0, p_loss = alpha)-ES(-1*y.1, p_loss = alpha))
cdte.mat[i,2] = ES(delta, p_loss = alpha)
cdte.mat[i,3] = ES(y.1, p_loss = alpha) + ES(-1*y.0, p_loss = alpha)
i = i + 1
}
cvar.kall = ES(tau.vec, p_loss = alpha)
cvar.us = colMeans(cdte.mat)
results.corr.shift[v,1] = cvar.us[1]
results.corr.shift[v,2] = cvar.us[2]
results.corr.shift[v,3] = cvar.us[3]
results.corr.shift[v,4] = cvar.kall
results.corr.shift[v,5] = c
results.corr.shift[v,6] = k
v = v + 1
}
}
corr.shift.df = data.frame(results.corr.shift) %>%
rename("LB" = "X1",
"True" = "X2",
"UB" = "X3",
"Kallus" = "X4",
"Corr" = "X5",
"Shift" = "X6") %>%
mutate(Shift = round(Shift,2)) %>%
pivot_longer(cols = c("LB", "True", "UB", "Kallus")) %>%
arrange(name, value)
return(corr.shift.df)
}
data = simulate.shift.dynamic(shift = 3, sigma.1 = 1, sigma.0 = 1, n.obs = 1000, mu.1 = 1, mu.0 = 1, alpha = 0.05)
plot.results.shift.dynamic(data)
rm(list = ls())
library(dplyr)
library(tidyr)
library(cvar)
library(ggplot2)
library(ggsci)
library(gganimate)
setwd("C:/Users/eminu/OneDrive/Desktop/Treatment-Effect-Risk")
source("./Simulation/helperfunctions.R")
# First look at our bounds vs the truth depending on the correlation
data.corr = simulate.corr.dynamic(shift = 2, sigma.1 = 2, sigma.0 = 2, n.obs = 100000, mu.1 = 1, mu.0 = 1)
(plot.corr = plot.results.corr.dynamic(data.corr))
ggsave("./Plots/bounds_corr.png", plot.corr, width = 20, height = 20, units = "cm")
# Now compare our results with Kallus depending on Var(delta\mid X)
data.comp = simulate.full.data(shift = 2, sigma.1 = 2, sigma.0 = 2, n.obs = 1000, mu.1 = 1, mu.0 = 1, alpha = 0.05)
(plot.comp = plot.results.full(data.comp))
ggsave("./Plots/bounds_kallus_vardelta.png", plot.comp, width = 15, height = 15, units = "cm")
# Now compare our results with Kallus depending only on the correlation
data.comp.corr = simulate.corr.full(shift = 2, sigma.1 = 2, sigma.0 = 2, n.obs = 1000, mu.1 = 1, mu.0 = 1, alpha = 0.05)
(plot.comp.corr = plot.results.corr.full(data.comp.corr))
ggsave("./Plots/bounds_kallus_corr.png", plot.comp.corr, width = 15, height = 15, units = "cm")
# Now compare our results with Kallus depending only on the correlation and the level of mean-shift in Y_1,Y_0
data.comp.corr.shift = simulate.shift.dynamic(shift = 3, sigma.1 = 2, sigma.0 = 2, n.obs = 1000, mu.1 = 1, mu.0 = 1, alpha = 0.05)
(plot.comp.corr.shift = plot.results.shift.dynamic(data.comp.corr.shift))
ggsave("./Plots/bounds_kallus_corr_shift.png", plot.comp.corr.shift, width = 20, height = 20, units = "cm")
# Now compare our results with Kallus depending on Var(delta\mid X)
data.comp = simulate.full.data(shift = 2, sigma.1 = 2, sigma.0 = 2, n.obs = 10000, mu.1 = 1, mu.0 = 1, alpha = 0.05)
(plot.comp = plot.results.full(data.comp))
(plot.comp = plot.results.full(data.comp))
plot.results.corr.dynamic = function(df){
# df: data set of results from dynamic
plot = ggplot(data = df, aes(x = alpha, y = value, group = name,
color = name)) +
geom_line(alpha = 0.6, position = position_jitter(width = 0.01, height = 0.01, seed = 1)) +
geom_point(position = position_jitter(width = 0.01, height = 0.01, seed = 1)) +
theme_bw() +
scale_color_jama()[c(2,3,4)] +
theme(legend.position = "top") +
labs(color = "", group = "", x = expression(alpha),
y = expression(widehat(CVaR[alpha](delta)))) +
facet_wrap(~corr)
return(plot)
}
(plot.corr = plot.results.corr.dynamic(data.corr))
pal_jama("default")(4)
plot.results.corr.dynamic = function(df){
# df: data set of results from dynamic
plot = ggplot(data = df, aes(x = alpha, y = value, group = name,
color = name)) +
geom_line(alpha = 0.6, position = position_jitter(width = 0.01, height = 0.01, seed = 1)) +
geom_point(position = position_jitter(width = 0.01, height = 0.01, seed = 1)) +
theme_bw() +
pal_jama("default")(4)[c(2,3,4)] +
theme(legend.position = "top") +
labs(color = "", group = "", x = expression(alpha),
y = expression(widehat(CVaR[alpha](delta)))) +
facet_wrap(~corr)
return(plot)
}
(plot.corr = plot.results.corr.dynamic(data.corr))
pal_jama("default")(4)[2,3,4]
pal_jama("default")(4)[1]
pal_jama("default")(4)[c(1,2)]
plot.results.corr.dynamic = function(df){
# df: data set of results from dynamic
plot = ggplot(data = df, aes(x = alpha, y = value, group = name,
color = name)) +
geom_line(alpha = 0.6, position = position_jitter(width = 0.01, height = 0.01, seed = 1)) +
geom_point(position = position_jitter(width = 0.01, height = 0.01, seed = 1)) +
theme_bw() +
pal_jama("default")(4)[c(2,3,4)] +
theme(legend.position = "top") +
labs(color = "", group = "", x = expression(alpha),
y = expression(widehat(CVaR[alpha](delta)))) +
facet_wrap(~corr)
return(plot)
}
(plot.corr = plot.results.corr.dynamic(data.corr))
plot.results.corr.dynamic = function(df){
# df: data set of results from dynamic
plot = ggplot(data = df, aes(x = alpha, y = value, group = name,
color = name)) +
geom_line(alpha = 0.6, position = position_jitter(width = 0.01, height = 0.01, seed = 1)) +
geom_point(position = position_jitter(width = 0.01, height = 0.01, seed = 1)) +
theme_bw() +
scale_color_manual(values = pal_jama("default")(4)[c(2,3,4)]) +
theme(legend.position = "top") +
labs(color = "", group = "", x = expression(alpha),
y = expression(widehat(CVaR[alpha](delta)))) +
facet_wrap(~corr)
return(plot)
}
(plot.corr = plot.results.corr.dynamic(data.corr))
ggsave("./Plots/bounds_corr.png", plot.corr, width = 20, height = 20, units = "cm")
(plot.comp = plot.results.full(data.comp))
ggsave("./Plots/bounds_kallus_vardelta.png", plot.comp, width = 15, height = 15, units = "cm")
(plot.comp.corr = plot.results.corr.full(data.comp.corr))
ggsave("./Plots/bounds_kallus_corr.png", plot.comp.corr, width = 15, height = 15, units = "cm")
plot.results.shift.dynamic = function(df){
# df: data set of results from shift dynamic
plot = ggplot(data = df, aes(x = Corr, y = value, group = name,
color = name)) +
geom_line(alpha = 0.6, position = position_jitter(width = 0.01, height = 0.01, seed = 1)) +
geom_point(position = position_jitter(width = 0.01, height = 0.01, seed = 1),
size = 0.5) +
theme_bw() +
scale_color_jama() +
theme(legend.position = "top") +
labs(color = "", group = "", x = expression(rho),
y = expression(widehat(CVaR[alpha](delta)))) +
facet_wrap(~Shift)
return(plot)
}
(plot.comp.corr.shift = plot.results.shift.dynamic(data.comp.corr.shift))
plot.results.shift.dynamic = function(df){
# df: data set of results from shift dynamic
plot = ggplot(data = df, aes(x = Corr, y = value, group = name,
color = name)) +
geom_line(alpha = 0.6, position = position_jitter(width = 0.01, height = 0.01, seed = 1)) +
geom_point(position = position_jitter(width = 0.01, height = 0.01, seed = 1),
size = 0.85) +
theme_bw() +
scale_color_jama() +
theme(legend.position = "top") +
labs(color = "", group = "", x = expression(rho),
y = expression(widehat(CVaR[alpha](delta)))) +
facet_wrap(~Shift)
return(plot)
}
(plot.comp.corr.shift = plot.results.shift.dynamic(data.comp.corr.shift))
ggsave("./Plots/bounds_kallus_corr_shift.png", plot.comp.corr.shift, width = 20, height = 20, units = "cm")
